threshhold <-0.047  # threshold value for MIR reflectance
reclass_mat <- matrix(nrow = 2,ncol = 3, data = c(-.1,threshhold,0,threshhold,1,1),byrow = T)  # from, to, assign
reclass_mat
wtr_msk <- reclassify(a,rcl = reclass_mat)
levelplot(wtr_msk)
mir_imgs <- list.files(path = "../../../MODIS_data", pattern = "*_MIR_reflectance.tif$",recursive = T,full.names = T)
mir_imgs
mir_stack <- stack(mir_imgs)
mir_stack <- mir_stack * 0.0001
histogram(mir_stack[[1:30]]) # just histogram of first 30 images
a <- mean(mir_stack)
levelplot(a, main = 'Average MIR reflectance from 2012-03 to 2015-04')
dates <- substr(mir_imgs,30,36)
Year <-  substr(dates,1,4)
DOY <- substr(dates,5,7)
DOY <-as.integer(DOY)
summer_imgs <- DOY > 172 & DOY < 266
summer_imgs
summer_mir_imgs <- mir_imgs[summer_imgs]
summer_mir_stack <- stack(summer_mir_imgs)
summer_mir_stack <- summer_mir_stack * 0.0001
a <- mean(summer_mir_stack)
levelplot(a,main = "Average MIR reflectance for summer images",pretty = T)
histogram(a)
density(a)
freq(a,digits = 2)
threshhold <-0.047  # threshold value for MIR reflectance
reclass_mat <- matrix(nrow = 2,ncol = 3, data = c(-.1,threshhold,0,threshhold,1,1),byrow = T)  # from, to, assign
reclass_mat
wtr_msk <- reclassify(a,rcl = reclass_mat)
levelplot(wtr_msk)
mir_imgs <- list.files(path = "../../MODIS_data", pattern = "*_MIR_reflectance.tif$",recursive = T,full.names = T)
mir_imgs
mir_stack <- stack(mir_imgs)
mir_stack <- mir_stack * 0.0001
histogram(mir_stack[[1:30]]) # just histogram of first 30 images
a <- mean(mir_stack)
levelplot(a, main = 'Average MIR reflectance from 2012-03 to 2015-04')
dates <- substr(mir_imgs,30,36)
Year <-  substr(dates,1,4)
DOY <- substr(dates,5,7)
DOY <-as.integer(DOY)
summer_imgs <- DOY > 172 & DOY < 266
summer_imgs
summer_mir_imgs <- mir_imgs[summer_imgs]
summer_mir_stack <- stack(summer_mir_imgs)
summer_mir_stack <- summer_mir_stack * 0.0001
a <- mean(summer_mir_stack)
levelplot(a,main = "Average MIR reflectance for summer images",pretty = T)
histogram(a)
density(a)
freq(a,digits = 2)
threshhold <-0.047  # threshold value for MIR reflectance
reclass_mat <- matrix(nrow = 2,ncol = 3, data = c(-.1,threshhold,0,threshhold,1,1),byrow = T)  # from, to, assign
reclass_mat
wtr_msk <- reclassify(a,rcl = reclass_mat)
levelplot(wtr_msk)
mir_imgs <- list.files(path = "../../MODIS_data", pattern = "*_MIR_reflectance.tif$",recursive = T,full.names = T)
mir_imgs
mir_stack <- stack(mir_imgs)
mir_stack <- mir_stack * 0.0001
histogram(mir_stack[[1:30]]) # just histogram of first 30 images
a <- mean(mir_stack)
levelplot(a, main = 'Average MIR reflectance from 2012-03 to 2015-04')
dates <- substr(mir_imgs,30,36)
Year <-  substr(dates,1,4)
DOY <- substr(dates,5,7)
DOY <-as.integer(DOY)
summer_imgs <- DOY > 172 & DOY < 266
summer_imgs
summer_mir_imgs <- mir_imgs[summer_imgs]
summer_mir_stack <- stack(summer_mir_imgs)
summer_mir_stack <- summer_mir_stack * 0.0001
a <- mean(summer_mir_stack)
levelplot(a,main = "Average MIR reflectance for summer images",pretty = T)
histogram(a)
density(a)
freq(a,digits = 2)
threshhold <-0.047  # threshold value for MIR reflectance
reclass_mat <- matrix(nrow = 2,ncol = 3, data = c(-.1,threshhold,0,threshhold,1,1),byrow = T)  # from, to, assign
reclass_mat
wtr_msk <- reclassify(a,rcl = reclass_mat)
levelplot(wtr_msk)
mir_imgs <- list.files(path = "MODIS_data", pattern = "*_MIR_reflectance.tif$",recursive = T,full.names = T)
mir_imgs
mir_stack <- stack(mir_imgs)
mir_stack <- mir_stack * 0.0001
histogram(mir_stack[[1:30]]) # just histogram of first 30 images
a <- mean(mir_stack)
levelplot(a, main = 'Average MIR reflectance from 2012-03 to 2015-04')
dates <- substr(mir_imgs,30,36)
Year <-  substr(dates,1,4)
DOY <- substr(dates,5,7)
DOY <-as.integer(DOY)
summer_imgs <- DOY > 172 & DOY < 266
summer_imgs
summer_mir_imgs <- mir_imgs[summer_imgs]
summer_mir_stack <- stack(summer_mir_imgs)
summer_mir_stack <- summer_mir_stack * 0.0001
a <- mean(summer_mir_stack)
levelplot(a,main = "Average MIR reflectance for summer images",pretty = T)
histogram(a)
density(a)
freq(a,digits = 2)
threshhold <-0.047  # threshold value for MIR reflectance
reclass_mat <- matrix(nrow = 2,ncol = 3, data = c(-.1,threshhold,0,threshhold,1,1),byrow = T)  # from, to, assign
reclass_mat
wtr_msk <- reclassify(a,rcl = reclass_mat)
levelplot(wtr_msk)
ConvertEnviROI_toDataFrame <- function(ascii_file_path, name_of_ROI) {
a <- readLines(ascii_file_path)
c <- a[9:length(a)]
d <- sapply(c,FUN = function(X) str_split(X,pattern = "+  +"))
e <- data.frame(do.call(rbind, d))
names(e) <- unlist(str_split(a[8],pattern = "+  +"))
e$Class <- name_of_Class
e %<>% dplyr::select(`Map X`, `Map Y`, B1, B2, B3, B4, Class)
row.names(e) <- NULL
return(e)
}
ROI_Soil <- ConvertEnviROI_toDataFrame("ROIs/Pan_SPOT/pan_spot_soil_ROI.txt", "Soil")
ROI_Tree <- ConvertEnviROI_toDataFrame("ROIs/Pan_SPOT/pan_spot_tree_ROI.txt", "Tree")
ROI_Grass <-ConvertEnviROI_toDataFrame("ROIs/Pan_SPOT/pan_spot_grass_ROI.txt", "Grass")
ROI_Impervious <- ConvertEnviROI_toDataFrame("ROIs/Pan_SPOT/pan_spot_impervious_ROI.txt", "Impervious")
ROI_Water <- ConvertEnviROI_toDataFrame("ROIs/Pan_SPOT/pan_spot_water_ROI.txt", "Water")
library(stringr)
library(dplyr)
library(magrittr)
ConvertEnviROI_toDataFrame <- function(ascii_file_path, name_of_ROI) {
a <- readLines(ascii_file_path)
c <- a[9:length(a)]
d <- sapply(c,FUN = function(X) str_split(X,pattern = "+  +"))
e <- data.frame(do.call(rbind, d))
names(e) <- unlist(str_split(a[8],pattern = "+  +"))
e$Class <- name_of_Class
e %<>% dplyr::select(`Map X`, `Map Y`, B1, B2, B3, B4, Class)
row.names(e) <- NULL
return(e)
}
ROI_Soil <- ConvertEnviROI_toDataFrame("ROIs/Pan_SPOT/pan_spot_soil_ROI.txt", "Soil")
library(raster)
pan_spot <- stack("SPOT/geomatica_SPOT_panshp.tif")
f2 <- function(d,e,f) (d + e) / (f * param)
param <- 122
rm(list=ls())
library(raster)
beginCluster()
install.packages("snow")
require("snow")
beginCluster()
r <- raster()
r[] <- 1:ncell(r)
r
x <- clusterR(r, sqrt, verbose=T)
x
x <- clusterR(r, sqrt, verbose=T)
f1 <- function(x) calc(x, sqrt)
y <- clusterR(r, f1)
y
s <- stack(r, r*2, r*3)
f2 <- function(d,e,f) (d + e) / (f * param)
param <- 122
ov <- clusterR(s, overlay, args=list(fun=f2), export='param')
ov
plot(s)
plot(ov)
?overlay
?calc
pts <- matrix(c(0,0, 45,45), ncol=2, byrow=T)
pts
d <- clusterR(r, distanceFromPoints, args=list(xy=pts))
plot(d)
values(r) <- runif(ncell(r))
m <- c(0, 0.25, 1, 0.25, 0.5, 2, 0.5, 1, 3)
m <- matrix(m, ncol=3, byrow=TRUE)
r
plot(r)
rc1 <- clusterR(r, reclassify, args=list(rcl=m, right=FALSE),
filename='rcltest.grd', datatype='INT2S', overwrite=TRUE)
plot(rc1)
a <- 10
f3 <- function(x) sum(x)+a
z1 <- clusterR(s, calc, args=list(fun=f3), export='a')
plot(z1)
library("doParallel")
library("e1071")
library("randomForest")
library("class")
library("magrittr")
library("snow")
library("raster")
library("rgdal")
add_UFIA_classes <- function(x) {
x %<>% ratify()
rat <- levels(x)[[1]]
rat$landcover <- c('grass', 'impervious', 'soil', 'tree', 'water')
levels(x) <- rat
return(x)
}
UFIA_pal <- c(grass = "#FFFF99", impervious = "#F0027F", soil = "#FDC086", tree = "#7FC97F", water = "#386CB0")
image_name <- "SPOT_PanSharp_subset_wAddedFeatures"
image_directory <- "../PAN_SPOT/subset_images/Img_wAdditionalFeatures/"
image_path <- paste0(image_directory,image_name,".tif")
image <- brick(image_path)
image
plotRGB(image,4,3,2,stretch = "lin")
small_image_path <- "../PAN_SPOT/subset_images/sub3set.tif"
small_image <- brick(small_image_path)
setwd("~/Google Drive/Urban FIA/Reproducible_attempt/R")
image_name <- "SPOT_PanSharp_subset_wAddedFeatures"
image_directory <- "../PAN_SPOT/subset_images/Img_wAdditionalFeatures/"
image_path <- paste0(image_directory,image_name,".tif")
image <- brick(image_path)
image
plotRGB(image,4,3,2,stretch = "lin")
small_image_path <- "../PAN_SPOT/subset_images/sub3set.tif"
small_image <- brick(small_image_path)
water <- readOGR(dsn = "../PAN_SPOT/ROIs", layer = "pan_spot_subset_water", encoding = "ESRI Shapefile")
grass <- readOGR(dsn = "../PAN_SPOT/ROIs", layer = "pan_spot_subset_grass", encoding = "ESRI Shapefile")
tree <- readOGR(dsn = "../PAN_SPOT/ROIs", layer = "pan_spot_subset_tree", encoding = "ESRI Shapefile")
soil <- readOGR(dsn = "../PAN_SPOT/ROIs", layer = "pan_spot_subset_soil", encoding = "ESRI Shapefile")
impervious <- readOGR(dsn = "../PAN_SPOT/ROIs", layer = "pan_spot_subset_impervious", encoding = "ESRI Shapefile")
names(water) <- "water"
names(grass) <- "grass"
names(tree) <- "tree"
names(soil) <- "soil"
names(impervious) <- "impervious"
list_classes <- list(water, grass, tree, soil, impervious)
extract_bind_df_addclass <- function(x) {
w <- raster::extract(image,x)
w <- do.call("rbind",w)
w <- data.frame(w)
w$Class <- names(x)
return(w)
}
b <- lapply(list_classes, function(x) extract_bind_df_addclass(x))
classified_px <- do.call("rbind", b)
classified_px$Class %<>% as.factor()
df <- classified_px
sub <- sample(1:nrow(df),size = 5000, replace = F)
df <- df[sub,]
pred_cols <- names(image)
class_formula <- paste0("Class ~ ",paste(pred_cols, collapse=" + "))
class_formula
mtry_range <- seq(1, length(pred_cols)/2, 4)
nodesize_range <- c(5,10,30,50,100)
ntree_range <- seq(100,600,50)
rf_out <- tune(randomForest,
as.formula(class_formula),
data = df,
ranges = list(mtry = mtry_range,
nodesize = nodesize_range,
ntree = ntree_range))
summary(rf_out)
rf_best_mod <- rf_out$best.model
rf_best_mod
image
summary(df)
extract_bind_df_addclass <- function(x) {
w <- raster::extract(image[[1:17]],x)
w <- do.call("rbind",w)
w <- data.frame(w)
w$Class <- names(x)
return(w)
}
b <- lapply(list_classes, function(x) extract_bind_df_addclass(x))
b <- lapply(list_classes, function(x) extract_bind_df_addclass(x))
beginCluster()
b <- lapply(list_classes, function(x) extract_bind_df_addclass(x))
endCluster()
classified_px <- do.call("rbind", b)
classified_px$Class %<>% as.factor()
df <- classified_px
str(df)
summary(df)
image <- image[[1:17]]
df <- classified_px
sub <- sample(1:nrow(df),size = 5000, replace = F)
df <- df[sub,]
pred_cols <- names(image)
class_formula <- paste0("Class ~ ",paste(pred_cols, collapse=" + "))
class_formula
mtry_range <- seq(1, length(pred_cols)/2, 4)
nodesize_range <- c(5,10,30,50,100)
ntree_range <- seq(100,600,50)
rf_out <- tune(randomForest,
as.formula(class_formula),
data = df,
ranges = list(mtry = mtry_range,
nodesize = nodesize_range,
ntree = ntree_range))
summary(rf_out)
rf_best_mod <- rf_out$best.model
rf_best_mod
svm_out <- tune(svm,
as.formula(class_formula),
data = df,
ranges = list(kernel = c("radial"),
cost = c(10,90,100,300,700,1000,10000),
gamma = c(1,2,3,4,5)))
svm_out <- tune(svm,
as.formula(class_formula),
data = df,
ranges = list(kernel = c("radial","linear"),
cost = c(0.1,1,5,10),
gamma = c(0.001,0.01,0.1)))
summary(svm_out)
svm_best_mod <- svm_out$best.model
svm_best_mod
train <- as.matrix(df[,pred_cols])
cl <- df[,"Class"]
k_range <- seq(1,50,5)
knn_out <- tune.knn(x=train,
y = cl,
k = k_range,
tunecontrol = tune.control(sampling = "boot"))
summary(knn_out)
plot(knn_out)
best_k <- knn_out$best.parameters
best_k
knn_calc <- function(x) knn(train, x, cl, k = best_k)
image_directory <- "../PAN_SPOT/"
rf_filename <- paste0(image_directory,"ClassifiedImages/",image_name,"_rf_classification.tif")
beginCluster()
system.time(
rf_raster <- clusterR(image,predict, args = list(model = rf_best_mod))
)
endCluster()
rf_raster %<>% add_UFIA_classes()
writeRaster(rf_raster, rf_filename,overwrite = T)
svm_filename <- paste0(image_directory,"ClassifiedImages/",image_name,"_svm_classification.tif")
beginCluster()
system.time(
svm_raster <- clusterR(image,predict, args = list(model = svm_best_mod))
)
endCluster()
svm_raster %<>% add_UFIA_classes()
writeRaster(svm_raster, svm_filename,overwrite = T)
knn_filename <- paste0(image_directory,"ClassifiedImages/",image_name,"_knn_classification.tif")
beginCluster()
system.time(
knn_raster <- clusterR(image, calc, args = list(fun = knn_calc), export = c("train","cl", "best_k"))
)
returnCluster()
writeRaster(knn_raster, knn_filename,overwrite = T)
plot(rf_raster, col = UFIA_pal)
plot(svm_raster, col = UFIA_pal)
plot(knn_raster, col = UFIA_pal)
svm_best_mod
df_test <- classified_px[-sub,]
df_test <- df_test[sample(1:nrow(df_test), size = 1000),]
predict.svm(df_test)
svm.predict(df_test)
predict(svm_best_mod, df_test)
pred_test <- predict(svm_best_mod, df_test)
table(pred_test,df_test$Class)
df_test <- classified_px[-sub,]
df_test <- df_test[sample(1:nrow(df_test), size = 10000),]
pred_test <- predict(svm_best_mod, df_test)
table(pred_test,df_test$Class)
accuracy(table(pred_test,df_test$Class))
mean(pred_test == df_test$Class)
a <- drawExtent()
img_crpd <- crop(image,a)
plotRGB(img_crpd,4,3,2,stretch = "lin")
svm_crpd <- crop(svm_raster,a)
plot(svm_crpd)
quartz()
plotRGB(img_crpd,4,3,2,stretch = "lin")
3*8*3*3
3*8*3*3*18
image
str(df)
summary(df)
svm_out
lei_pred <- predict(svm_best_mod, lei_df)
install.packages("kernlab")
98
install.packages("irace")
res
res$models[[1]]
res$pred
classif.lrn$config
classif.lrn$par.set
mod$features
mod$subset
names(small_image)
names(image)
names(small_image)
plot(i)
plot(i)
n
